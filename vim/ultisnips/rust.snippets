snippet { "" w
{
	${VISUAL}${1}
}
endsnippet

snippet impl
impl${1:<${2:'a}>} ${3:${4:Trait} for }${5:${6:Foo}$1} {
	$0
}
endsnippet

snippet deref
impl std::ops::Deref for ${1:Type} {
	type Target = ${2:Type2};
	fn deref(&self) -> &Self::Target {
		${3:self.${4:0}}
	}
}
endsnippet

snippet derefmut
impl std::ops::DerefMut for ${1:Type} {
	fn deref_mut(&mut self) -> &mut Self::Target {
		${3:self.${4:0}}
	}
}
endsnippet

snippet debug
impl fmt::Debug for ${1:Type} {
	fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result<(), fmt::Error> {
		write!(f, "${2:\{\}}"${3:, ${4:self.${5:foo}}})
	}
}
endsnippet

snippet display
impl std::fmt::Display for ${1:Type} {
	fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
		write!(f, "${2:\{\}}"${3:, ${4:self.${5:foo}}})
	}
}
endsnippet

snippet default
impl Default for ${1:Type} {
	fn default() -> Self {
		${2:$1${3:(${4:0})}}
	}
}
endsnippet

snippet clone
impl Clone for ${1:Type} {
	fn clone(&self) -> Self {
		$2
	}${3:
	fn clone_from(&mut self, source: &Self) \{
		$4
	\}}
}
endsnippet

snippet error
impl std::error::Error for ${1:Type} {
	fn description(&self) -> &str {
		${2:"${3:$1}"}
	}${4:
	fn cause(&self) -> Option<&Error> \{
		${5:Some(${6:self.${7:foo}})}
	\}}
}
endsnippet

snippet from
impl From<${1:SourceType}> for ${2:DestinationType} {
	fn from(${3:src}: $1) -> $2 {
		${4:$2${5}${6:(${7:$3})}}
	}
}
endsnippet

snippet drop
impl Drop for ${1:Type} {
	fn drop(&mut self) {
		$0
	}
}
endsnippet

snippet "der(i(ve?)?)?" "" r
#[derive(${1:${2:Clone${3:, Copy}}${4:, PartialEq, Eq${5:, PartialOrd, Ord}}${6:, Hash}${7:, Debug}})]
endsnippet

snippet "st(ruct?)?" "" r
${1:pub }struct ${2:Magic}${3: \{
	$0
\}}
endsnippet

snippet "en(um?)?" "" r
${1:pub }enum ${2:Magic} {
	$0
}
endsnippet

snippet "tr(a(it?)?)?" "" r
${1:pub }trait ${2:Magic} {
	$0
}
endsnippet

snippet for
for ${1:i} in ${2:${3:0}..${4:8}} {
	$5
}
endsnippet

snippet while
while ${1:1 + 1 == 2} {
	$2
}
endsnippet

snippet loop
loop {
	$1
}
endsnippet

snippet if
if ${1:1 + 1 == 2} {
	$2
}
endsnippet

snippet "el(se?)?" "" r
 else {
	$1
}
endsnippet

snippet "el(se?)?if" "" r
 else if ${1:1 + 1 == 2} {
	$2
}
endsnippet

snippet match
match ${1:foo} {
	${2:0} => ${3:(),}
	${4:_} => ${5:(),}
}
endsnippet

snippet fn
fn ${1:do_magic}(${2:&self})${3: -> ${4:Result<${5:Value}, ${6:Error}>}}${7: \{
	$0
\}}
endsnippet

snippet "[Ss]ome" "" rw
Some(${VISUAL}${1})
endsnippet

snippet "[Ee]rr" "" rw
Err(${VISUAL}${1})
endsnippet

snippet "[Oo]k" "" rw
Ok(${VISUAL}${1})
endsnippet

snippet "[Rr]esult" "" rw
Result<${1:${VISUAL:Value}}, ${2:Error}>
endsnippet

snippet "[Oo]ption" "" rw
Option<${1:${VISUAL:Value}}>
endsnippet

snippet Vec
Vec<${1:${VISUAL:u8}}>
endsnippet

snippet vec
vec![${1:0; ${2:32}}]
endsnippet

snippet Box
Box<${1:${VISUAL:u8}}>
endsnippet

snippet box
Box::new(${VISUAL}${1})
endsnippet
